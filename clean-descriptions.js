/**
 * Script pour nettoyer les descriptions de produits
 * Supprime l'emoji üè∑Ô∏è des descriptions
 */

const { createClient } = require('@libsql/client');

async function cleanProductDescriptions() {
  console.log('üßπ D√©but du nettoyage des descriptions de produits...');
  
  // Configuration de la base de donn√©es
  const client = createClient({
    url: process.env.DATABASE_URL,
    authToken: process.env.DATABASE_AUTH_TOKEN,
  });

  try {
    // R√©cup√©rer tous les produits avec des descriptions
    const result = await client.execute(`
      SELECT id, name, description 
      FROM products 
      WHERE description IS NOT NULL AND description != ''
    `);

    console.log(`üì¶ ${result.rows.length} produits trouv√©s avec des descriptions`);

    let cleanedCount = 0;

    for (const row of result.rows) {
      const id = row.id;
      const name = row.name;
      const originalDescription = row.description;
      
      // Supprimer l'emoji üè∑Ô∏è de la description
      const cleanedDescription = originalDescription.replace(/üè∑Ô∏è/g, '').trim();
      
      // V√©rifier si la description a chang√©
      if (cleanedDescription !== originalDescription) {
        console.log(`üîß Nettoyage: ${name}`);
        console.log(`   Avant: "${originalDescription}"`);
        console.log(`   Apr√®s: "${cleanedDescription}"`);
        
        // Mettre √† jour la description
        await client.execute({
          sql: 'UPDATE products SET description = ? WHERE id = ?',
          args: [cleanedDescription, id]
        });
        
        cleanedCount++;
      }
    }

    console.log(`‚úÖ Nettoyage termin√©: ${cleanedCount} descriptions modifi√©es`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    await client.close();
  }
}

// Ex√©cuter le script
cleanProductDescriptions().catch(console.error);